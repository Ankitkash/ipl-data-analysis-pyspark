# -*- coding: utf-8 -*-
"""PySpark_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KTIxKO3ricKj_qa3nsW9Fjhdk8LE7Iv7
"""

from google.colab import files
uploaded = files.upload()

from pyspark.sql.functions import count, sum, col, avg

from pyspark.sql import SparkSession
# Create Session
spark = SparkSession.builder.appName('IPL Data Analysis').getOrCreate()

spark

ball_df = spark.read.csv('ipl_ball_by_ball_2008_2022.csv', header=True, inferSchema=True)
matches_df = spark.read.csv('ipl_matches_2008_2022.csv', header= True, inferSchema= True)

ball_df

matches_df

ball_df.show()

matches_df

matches_df.show()

ball_df = ball_df.dropna()

matches_df = matches_df.dropna()

"""

# 1. Top run scorers

"""

top_batsmen = ball_df.groupby('batter').agg(sum('batsman_run').alias('total_runs')).orderBy(col('total_runs').desc())

top_batsmen.show(10)

"""

# 2. Top wicket takers

"""

top_bowlers = ball_df.filter(ball_df.iswicket_delivery == 1).groupby('bowler').agg(count('iswicket_delivery').alias('wickets')).orderBy(col('wickets').desc())

top_bowlers.show(10)

"""

# 3. Team wins

"""

team_wins = matches_df.groupby('winning_team').count().orderBy(col('count').desc())

team_wins.show(10)

"""# 4. Toss Advantage

"""

matches_df = matches_df.withColumn('toss_match_win', (col('toss_winner') == col('winning_team')).cast('int'))

toss_advantage = matches_df.agg(avg('toss_match_win').alias('toss_win_match_win_rate'))

toss_advantage.show(10)

"""# 5. Number of Player of the match taken by the players"""

pom_counts = matches_df.groupBy('player_of_match').agg(count('*').alias('pom_awards')).orderBy(col('pom_awards').desc())

pom_counts.show(10)

"""# 6. Number of Super Over"""

super_over_matches = matches_df.filter(col('superover') == 'Y').count()

print(super_over_matches)

"""# 7. Number of matches according to the city"""

matches_per_city = matches_df.groupBy('city').agg(count('*').alias('total_matches')).orderBy("total_matches", ascending = False)

matches_per_city.show()

"""# 8. Number of matches according to the venue"""

matches_per_venue = matches_df.groupBy('venue').agg(count('*').alias('total_matches_venue')).orderBy('total_matches_venue', ascending = False)

matches_per_venue.show()

"""# 9. List of bowlers and their total extras runs"""

extras_per_bowler = ball_df.groupBy('bowler').agg(sum('extras_run').alias('total_extras')).orderBy(col('total_extras').desc())

extras_per_bowler.show(10)

"""# 10. Extra by a particular bowler"""

bowler_name = 'RP Singh'
extra_by_bowler = ball_df.filter(col('bowler') == bowler_name).agg(sum('extras_run').alias('total_extras_particular_bowler'))
extra_by_bowler.show()

"""# 11. Dismissal Type"""

dismissal_counts = ball_df.groupBy('dismisal_kind').agg(count('*').alias('total_dismisals')).orderBy('total_dismisals', ascending = False)

dismissal_counts.show()

